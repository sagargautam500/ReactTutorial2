// useEffect Hook in React
// useEffect React Hook ‡§π‡•ã, ‡§ú‡•Å‡§® functional components ‡§≠‡§ø‡§§‡•ç‡§∞ side effects (API call, event listeners, subscriptions, etc.) handle ‡§ó‡§∞‡•ç‡§® ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ó‡§∞‡§ø‡§®‡•ç‡§õ‡•§
// ‡§Ø‡•ã componentDidMount, componentDidUpdate, ‡§∞ componentWillUnmount ‡§ú‡§∏‡•ç‡§§‡§æ lifecycle methods ‡§ï‡•ã ‡§ï‡§æ‡§Æ Functional Components ‡§Æ‡§æ ‡§ó‡§∞‡•ç‡§® ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ó‡§∞‡§ø‡§®‡•ç‡§õ‡•§

// üëâ useEffect function render ‡§≠‡§è‡§™‡§õ‡•Ä ‡§ö‡§≤‡•ç‡§õ‡•§
// üëâ ‡§Ø‡§∏‡§ï‡•ã ‡§≠‡§ø‡§§‡•ç‡§∞‡§ï‡•ã callback function component mount ‡§π‡•Å‡§Å‡§¶‡§æ, update ‡§π‡•Å‡§Å‡§¶‡§æ, ‡§µ‡§æ unmount ‡§π‡•Å‡§Å‡§¶‡§æ execute ‡§π‡•Å‡§® ‡§∏‡§ï‡•ç‡§õ‡•§



import { useState } from 'react'
import './App.css'
import AutoCounter from './types/AutoCounter4'
import Counter1 from './types/Counter1'
import Counter2 from './types/Counter2'
import Counter3 from './types/Counter3'
import WindowSize from './types/WindowSize4'

function App() {
 const [show,setShow] =useState(false)

  return (
    <>
      <h1>use effect hook practice::</h1>
      {/* <Counter1 /> */}
      {/* <Counter2 /> */}
      {/* <Counter3 /> */}
      {/* <WindowSize/> */}
      <div>
      <button onClick={() => setShow(!show)}>
        {show ? "Stop Counter" : "Start Counter"}
      </button>
      {show && <AutoCounter />}
    </div>
    </>
  )
}

export default App
